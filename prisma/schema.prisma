// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ShotStatus {
  DRAFT
  PUBLISHED
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 

model User {
  id            String    @id @default(cuid())
  name          String
  email         String  @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  address       String? 
  bio           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  shots         Shot[]

  // strippe
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Shot {
  id          String         @id @default(cuid())
  title       String
  files       String []
  gallery     Json?
  atlTexts    Json?

  status      ShotStatus @default(DRAFT)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId      String
  user     User     @relation(fields: [userId], references: [id])
}

 